---
import {
    type ContestData, type EducationCategory,
    processContestResults, type RawContestDataEntry
} from "../../util/contestResults";

import { ContestsView } from "./ContestsTableView";

const allResults = import.meta.glob("../../../public/data/*.json", { eager: true }) as Record<string, ContestData>;

const peopleBlacklist = [ "Višen Pavlica", "Kristijan Gašpar" ];

const DataByContests = Object.fromEntries(
    Object.values(allResults)
        .map(({
                  name,
                  problems,
                  data: rawData
              }, _, __, data = rawData.filter(it => !peopleBlacklist.includes(it.full_name))
            ) =>
                [ name, {
                    problems,
                    data: {
                        all: processContestResults(data),
                        elementary: processContestResults(data.filter(it => it.category === "elementary")),
                        high: processContestResults(data.filter(it => it.category === "high")),
                        university: processContestResults(data.filter(it => it.category === "university"))
                    }
                } ]
        ));

const collapseContestData = (category: EducationCategory | "all"): RawContestDataEntry[] => {
    const users: Record<string, RawContestDataEntry> = {};

    for (const [ name, { data } ] of Object.entries(DataByContests)) {
        const categoryData = data[category];

        for (const entry of categoryData) {
            if (!users[entry.full_name]) {
                users[entry.full_name] = {
                    full_name: entry.full_name,
                    category: entry.category,
                    institution: entry.institution,
                    score: {}
                };
            }

            users[entry.full_name].score[name] = entry.total;
        }
    }

    return Object.values(users);
};

DataByContests["Ukupno"] = {
    problems: Object.values(allResults).map(it => it.name),
    data: {
        all: processContestResults(collapseContestData("all")),
        elementary: processContestResults(collapseContestData("elementary")),
        high: processContestResults(collapseContestData("high")),
        university: processContestResults(collapseContestData("university"))
    }
};
---

<div class="container">
    <ContestsView client:load dataByContests={DataByContests}/>
</div>

<style>
    .title {
        font-size: 1.6rem;
    }

    .container {
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 2rem 0;
    }

    div:not(.container) {
        display: flex;
        flex-direction: column;
    }

</style>
